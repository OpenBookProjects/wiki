#summary zip abt. ZoomQuiet make install
#labels Document,ZoomQuiet

*[ZoomQuiet Zoom.Quiet === Zoomq = 仨儿]*

= 大妈的编译过程 =
背景: [http://code.google.com/p/openbookproject/wiki/ZqHowTurnInto#%E5%91%BD%E9%A2%98 ZQ 是如何练就的?-) 命题]

<wiki:toc max_depth="2" />

Chnagelog::
 * 110223 完成印刷用版,大妈编译手册初稿
 * 110211 迁移到新 URL 增补,原先大妈书的时空图谱,以及整体结构
 * 110210 根据 eric@just-pub.com 的通知,针对《生于七十年代》进行重构    
 * 100108 根据Yeka 试读调查补"水"
 * 091112 受邀创建技术小传,设立章节 

http://wiki.woodpecker.org.cn/moin/ZoomQuiet/book/MappIng?action=AttachFile&do=get&target=autogenerated-f4e1611e078764d1086cd53973232da253dfaa40.png

== 开蒙 ==
也许一切都在童年完成了配置,只是经过近20年的编译,才形成了今天的我...
 * 每个人受到最大影响的估计还是家庭环境,毕竟,在父母家中慢慢成长的时期是一个人世界观/价值观/审美观等等基础社会观念形成的时期,而且一但形成极难改变,所以,先得自我分析一下,ZQ 的基础元件库的形成....

=== 俺家 ===
小史:
 * 200余年前周氏一支在上海近郊--嘉定县落户
 * 1960 爷爷带领全家6口来到兰州(进入国营504厂)
 * 1972 父母成婚
 * 1974 俺落草
 * 1978 俺弟,抢在独生子女法发行之际也落草

可以说,老周家从爷爷开始就非常不走寻常路:
 * 爷爷自学机修,从而将全家从农村带入城市;
 * 父亲自学过俄语/英语/木工/漆匠/财会/预算; 整过灯具生产/皮带称研制...初中学历,退休后还被反聘为工程监理,参加35个核电站的建设;
 * 母亲从技专起家,工作是精密仪器,后来为照顾我们俩个小和尚,转行作技校老师,也算有些桃李...

父辈闯荡的成果就是给俺兄弟俩提供了一个非常稳固的家庭环境:
 * 一般使用数字编码指代的国营厂,都始建于冷战时期,以被封锁也可以独立坚持生产3年以上为目标设计运行的,包含了从农场到自来水厂等等一应完备生活辅助设施!所以,在国营大厂基本上生活圏比较稳定,从1岁到20岁一直生活在5平方公里范畴之内;
  * 国营504厂职工医院出生->子弟托儿所->子弟幼儿园->子弟小学->子弟中学->子弟高中! 同学也几乎是同一批子弟;
  * 整整20年,才搬过3次家; 12号居民楼四门四层单间->12号居民楼四门二层套房->49号居民楼二门四层套房;
 * 所以,基本很少去距离50公里以外的兰州市(兰州市本身非常狭长,达到190公司!虽然504厂属于兰州市西固区,但是相距还是非常远;-)
综上,俺童年的生活环境~504厂福利区,感觉就是一个坚固的小部落,形成了一个包含各种方面的完备的生活态度,不论后来怎么飘泊,感觉总是有一个坚固的家园在心中;这也形成了不论生活环境怎么变化,总是使用504厂式的坚固的生活方式来习惯的应对,而且应对的还成,从来没有因为生活方面的问题影响了技术上的追求;

    而且也在这基础之上,才有了俺各方面的基础元件储备;

比如说,阅读:
 * 从一年级开始,每年父亲都提醒:"今年很重要,关系到你将来能否上大学!" 但是,每次考试总是不用怎么努力就可以获得不是那么难看的成绩 ;-) 于是,在三年级后,就有了自个儿的节奏,开始规模化看书:
  * 从厂图书馆中成体系的看光所有科学幻想小说(苏联的,凡而纳的,,,)
  * 从同学家借到所有可以借到的
  * 从书摊,租/蹭各种有兴趣的小说~最深刻的印象除了武侠小说看,就是无意看到了"香水"(Das Parfum – Die Geschichte eines Mörders),令俺足足惊悚月余的薄书,也从此对人类的阴暗思想有了很一定的抵抗力...
  * 家里也长年订阅各种杂志,印象深刻的有:
    1. 童话报 ~ 连载有大量欧洲漫画
    1. 连环画报 ~ 哗!各种体裁/形式/内容的优秀作品哪!
    1. 幽默大师 ~ 这是高品味幽默感的发源地..
    1. 科学画报 ~ 绝对正宗的科普基地!
    1. 读者 ~ 好吧,小资的启蒙地...
  * 而且父亲也很有眼光的准备了大部头的工具书:
   * 十万个为什么 ~ 60年版本,体会到了红宝书的感染力!
   * 上下五千年 ~ 比历史课本好玩的多,当然比现在的明朝那点儿事儿要闷;-)
   * 世界上下五千年 ~ 原来外国银不太傻
   * 等等,也都被俺反复囫囵吞枣...
  * 另外,家里有台功率很可以的红灯牌收音机,从孙敬修开始,到单田芳/田连元/连丽如,然后是郑渊洁,认真听/读,储备了足够的语言技巧;
 * 所以,在同龄人中,很是可以随时,通过任意话题忽悠倒一片;
 * 另外,父亲为训练我的写作能力,从2年级开始,要求记日记,并定期检查,这直接促使俺掌握了虚构/复用/重载,等等日后常用的代码技巧,最熟练时,用2小时,补全了一个月的日记,谁都没有看出来...
 * 那时没有互联网,电视也不能常看,消息来源渠道非常少,但是通过大量杂博的阅读,储备了大量关键词,帮助俺快速建立起基本的世界观,提高了日后人生挫折的抗擊打力 ;-)
 * 不过,为什么喜欢阅读? 现在还真回忆不起最初是什么动因了,勉强分析的话,应该是有趣和有用吧:
  1. 读书有趣: 小孩子都是喜欢听故事的,但是,大人们可一般没有什么耐心和时间来给你讲个过瘾,怎么办呢?小朋友们自然有解决方式 --- 自个儿给自个儿讲哪,自然的,经常在小朋友们间分享故事的可就成了名人,很有范儿很有面子的,那么故事都哪里来呢? 自然是从故事书里了,不过,在阅读过程中,发现阅读本身就非常非常有趣,可以体验到各种现实生活中根本无法想象的经历! 结果就变成了自个儿拼命阅读,抽空给小朋友们忽悠了;
  1. 读书有用: "学好数理化,走遍天下都不怕",这话估计那个年代的小孩们经常听到,不过就俺的体验,基本没有用到过;反而是文学方面的图书很有用,比如说,家里有本"作家辞典",以描写的对象分类,收集了各种名家名著的对应片段,俺就是先大略的浏览后,再精读自个儿喜欢的部分,又根据作文的题目,随时查阅对应的片段,看是否吻合要求,如果可用的话,再精读,掌握核心旨趣后,仿照行文结构,用自个儿的语言改写,再配合上一些背景描述,哗,一篇高分作文就炮制出来鸟! 这种训练,直接的促成了俺日后对海量图书的粗读/略读/精读/摘录/分类管理等等各种阅读技法的形成!

再比如说,阅历:
 * 父母统一认为,经历是比知识更加重要的社会财富,所以,全家从小就坚持利用假期进行全国旅游:
  * 半票时,是每年一次
  * 全票时,是两年一次
  * 主要是四处走亲戚 --- 我有七个舅舅,两个叔叔,两个姑姑,分布在中国6个城市
而逐年积累起来的旅途体验,培养了我基本的观察和社会常识,并直观的对中国有了基本真实的认识;
 * 最重要的是培养了同任何人沟通的基本技巧和开放的心态,这是一个 Geek 最核心的素质要求了;不过,这是以话涝的习性为代价获得的...
 * 具体回想的话:
  * 小学时一次在课间打闹时,情急之下,俺一通王八拳将一高大(嗯嗯嗯!女庄发育早,一直到初3,几乎所有女生都比我高大!)女同学门牙击落,老师紧急送医院检查后,见我很无所谓的样子就吼:"你这叫破相!没了门牙,以后嫁不出去你要负责的!"我非常光棍的回答:"没事儿,这是乳牙,还有一茬要长的..."老师:"囧rz..."; 于是,明确了凡事儿,有科学常识就可以立于不败之地!
  * 再一年春节去武汉的火车上,硬卧,很兴奋,夜里抓一隔壁的小姑娘,应该是同龄人5年级左右吧,喷了2个多小时的全球形势,从高铁到冷战,到星球大战的科技原理...反正一直在科普,发觉随便一个概念人家都没有听说过,只好先解释一下,解释的时候又发现有没有听说过的名词,干是一路解释下去,等对方绕得差不多晕了,再跳回原先的线索; 总之,第二天一早,至少有两位前夜被迫听了壁脚的大人对俺说:"小朋友,太能讲了哈!"; 于是,知道了气势很重要,可以抓住交流时的主动权!

好吧,可以说那会儿没有意识到这已经形成了俺日后讲演时的基本表述结构:
{{{
理直气壮+三分科学 === 吼天下!
}}}
当然的,这种结构很招人反感的,很红卫兵的,好象道理都在俺这儿,根本没有平等沟通的架式,这也导致了很多问题,直到多年后俺才意识到,才有意识的进行改善,呜乎矣哉 ;-(

后来,也正是文科方面游刃有余,才决策冲击理科来快速提分,不过当初选择电脑相关专业是因为想从事动画方面的工作(那会儿从"圣斗士"开蒙,算是彻底成为首批国产"御宅族");

高四生活,算是首个人生挫折,倒是训练出对长线计划的坚守,以及宠侮皆忘的豁达,也为以后在技术领域独立跋涉时,准备好了心理基线;

为什么被高四的原因,就不分析了,家里凭空多出一年的教育支出本身就很困难,以至父亲提前内退,下广州找活儿增加收入,以便储备足够的学费来支付未来我们俩兄弟的大学生活...

虽然,高四学生本身,在西北社会上的形象还好,必竟内地教育质量不比京沪,甚至于有人坚持8年复读才终于考入北京大学的!但是,在学校里就太边缘了,原先高三时,同桌就是以前小学同班同学的姐姐,全程观摩过高四学生的现实姿态,自个儿也不时的流露过轻视的神态,没有想到马上就现世报到自个儿身上,在过年时,这位姐姐放假回来,还鼓勵过俺,叫俺熬过来就好了...各种生活中,24小时无时不在的压力,实在非常锻炼人的...然而,你没有资本和资格来发泄,只能反复的按照计划去复习,去作那些根本没有任何味道的习题,解出题目早已成为了条件反射,没有任何快感,甚至于,你有任何快乐的感觉时,同时就有超量的负罪感也迸发出来!

加之原先同学都外放高校了,留下来的情景也差不多,老师对于不计入升学率的高四生也没有什么偏愛;于是,真正一切靠自个儿了,好在二进宫,一切流程都知道,原先从200天开始倒计时的恐慌也早已适度,反而自己从300天开始自行制定复习规划,将弱课先列出,划定阶段指标,分解成每周目标,以及每日作习,定期自我摸底,对比新的学校计划以及进度,调整复习计划... 完全和后来知道的软件工程瀑布法一样,将高考当作自个儿的项目,进行推进! 因为明白大学只是未来进入社会的基本敲门砖,专业也不管什么热门,认准了自个儿想学的计算机专业,学校成绩也不会成为就业的唯一标准,所以,心态上就比应届的要放松很多; 

但是,不时被氛围激起的焦懆依然要用越来越大的气力来自行平复!在高四,整整一年是靠 唐朝 撑过来的!早先从黑豹开始,才知道有摇滚这事儿的,从中国火中知道了那些乐队,"攢钱"买了正版的同名专辑:
 * 每天反复不断的听,睡觉时也听
 * 没人时,就跟着磁带吼...都吼出肺活量了(5700ml,体验时吹出的!-)
 * 到现在,那盘专辑的歌都能唱...可惜,多数K厅是找不到这专辑的;-(
也正是对少量优秀摇滚作品的深入体验,形成了对于 Hacker 精神的最本原理解,以至最后成为自由软件的信徒,都应该源于这一苦闷时期,对于精神自由的自我催眠!

除了高考,同时期算是完成的长期计划,还有个科学幻想小说:"23世纪学校":
 * 发源自初3时的无命题作文,当时选择科幻体裁是因为正在饭改版不久的科幻世界,同时很对分数为命的教育制度不平,当时写完了一整本作文本,3万字左右,写了两周;
 * 高二时,又非常迷童话大王,而且郑大哥很给力,将俺的信件正确转发给了烟台的小作者,成为笔友,于是非常兴奋,要显一下功力,就准备扩写这篇小说;
 * 没想到一写就收不住了,初稿就近10万字,300多页稿纸,好容易抄出来,配上图,手工线装订好,在同学手里巡游了一下,反响很好 ;-)
 * 这下就自我膨胀了,感觉话没有说完,不吐不快; 于是重新扩写成25万字左右,装订成两大本,邮去了烟台;前后四个月将一切时间空隙利用起来,至少现在每日再怎么困总感觉不过零点就睡很吃亏的心理定式就那会儿养成的;
好吧,这很有对高考的反叛,不过,这期间,每日快速进入状态,无我的创作,并定期回顾整体计划,用小阶段成果作成就感自我激勵,等等时间管理的技巧,也是高四时可以自行坚守整个更大的长线复习计划的重要因素,进而,也可以说,更加遥远的后来,可以自行义无反顾的独自乐观的学习别人没有听说过的技术的根本素质...

== 入世 ==
1994年,终于离开了 504 部落,开始独立行世...

 * 就读上海附近常州市的江苏石油化工学院(现江苏工业大学),计算机科学与应用系;很一般的学校,很一般的专业,很一般的班级,关键是很一般的图书馆;-( 
 * 回想起来在校的主要活动永远是看书踢球勤工俭学,由于是学院首届计算机系,整个科系都在摸索阶段,根本无法很好的引导学生及时破除迷信,体验到软件开发的乐趣,多是照本宣课的作练习;虽然利用图书馆,自学了C++/JAVA 等时髦的技术,但是依然形成了错误的软件开发印象,对自个儿毕业后的工作有了不切实的想象,以为电脑设计比软件开发要自在,在大三后全力自我训练平面设计,熟练掌握了 Photoshop/Illustrator/CoreDraw 之类设计软件;进而甚至于进入了广告公司实习;
 * 当然,毕竟在计算机方面的兴趣是有的,宿舍凑钱买了电脑,赶着安装了 Win95,在毕设课题老师的实验室还体验到了 NT ,甚至于掺合校园网建设时摸了几下Unix;

 整体上,在常州5年,前四年沉闷的大学生活,体验到了通常意义中的独立生活,营造自个儿的社交圏,形象...扫掉软件开发的盲,但是固化了桌面软件开发极其复杂的印象;最后一年紧张的实习/打工:
 * 通过在广告公司的实习,印证了自个儿不是一个艺术工人,绝了进入动漫行业的念想,专心在码农的单纯世界里自乐;-)
 * 通过早已倒掉的"中国C网"三级节点的运营和学习,接触到最初的网络经营;
 * 通过公司免费拔号网络形成了最初的互联网经验,自学用 Flash+PHP 制作公司宣传网站由此获得资格,进入上海企业,完成新阶段的技术进级...
可以说,在常州长期的低收入生活(月生活费平均400元),形成了一整套以最小支出保证良好生命体征的生活方式;更加重要的,形成了稳定的心理状态,可以随时调整心情到可用! 这在以后的各种工程情景中可以长期的稳定输出证明是非常重要的素质;-)

具体回想的话:
 1. 首先,脱离了封闭的504部落环境,在一个开放的小社会中,通过各种活动,证明了自个儿不怂!
  * 虽然高考分数是全班倒数第二, 但是不论班级活动组织,体育运动掺合,专业课程学习,都不差,而且只要用心都可以得到很好的名次;
  * 在中小学的阅读积累的知识片段,可以在各种交流过程中应用上,成为每晚宿舍床会大讨论的集体对立面,可以舌战群儒多年不倒...
  * 好吧,得承认,有外班女生主动追俺,这也是非常的社会肯定...
 1. 在校期间进一步自我训练出来了更强的阅读能力,因为学校图书馆规定一次最多借5本看一个月,就得还,否则罚款,续借又非常麻烦; 结果长期的疯狂阅读(这是的娱乐和学习方式中经济支出最低的了),形成了稳定的泛读/精读本能,到现在每日阅读量可以>100万字,这也成为后来可以快速收集整理很广泛的技术领域资料,并在一个稳定的个人知识结构体系中进行管理和积累以及再使用,准备了最基础和使用的习惯支持;
  * 以至毕业时,退借书卡,清空个人借阅记录用了一刻钟,好象有3千多本的量;基本上将文史/技术类,可以看的都看过了;
  * 不过,精读的方法,居然还是中学时复习课本形成的:
   1. 先看目录,明确是否预期的内容范畴
   1. 再看前言/跋/后记,明确此书在同类图书中的地位和特点
   1. 快速通读,跳着看有兴趣的几节内容,明确行文/内容,是否吻合自个儿的需要,并大致明确内容的分布
   1. 最后根据当前的需求,精读其中关键几节,并作笔记
   1. 在还书日期限内确保一本书的核心内容已经了然,坚定的归还
   1. 一但有需要,根据笔记,重新借出有针对性的使用
  * 泛读就不同了,完全是言情小说练出来的:-) 俗话说:"没有调查就没有发言权",俺以前都是科幻/武侠看得多,但是在日常沟通中,言情居然是硬通货?! 好吧:
   * 快速通过琼瑶阿姨的书进入这一领域,知道什么是四老花妲,什么是四小花妲;
   * 在短期之内通读了所有可以找到的顶尖的言情作家的书
   * 并掌握了这类作家出书的大致节奏,和每一位的风格
   * 齐活儿,任何涉及言情的谈话,可以专家样的任意侃了...
   * 要说收获的话:
    1. 认识了亦舒--倪匡的无敌妹妹!
    1. 加强了中文的语感,看书如翻书,眼睛一扫书页关键词自动跳出来,根本不用逐行看的,至少是十数行一次性的"看"
    1. 发现了文学作品中的模式复用:"老桥段有无穷种用法,不会因为老而不感人"
  * 要说阅读的阶段成果,应该算"科学史"这一选修课的毕业论文:"中国传统思想是人类的唯一救赎"
   * 主要的参考图书:《BEING DIGITAL》  Negroponte/《The World since 1500 A Globe histoty》  Englewood Cliffs,N.J/《中国人的大思路--辩证的人本主义》  马中/《世界全史》/《世纪之交--与高技术专家对话》/《人文主义视野中的技术》  高亮华 /《自然的沉沦与拯救》  李章印/《自然不可改良》  何塞·卢岑贝格/《后现代科学——科学魅力的再现》  大卫·雷·格里芬 /...
   * 可以说将可以收集到的资料吃下去,用自个儿的逻辑拼贴起来,除了彻底熟悉了表形码输入法之外,真正实践了一次论文式写作:
    1. 完整的立论/分析/推演/结论
    1. 完整的将一个方向的思考清晰的表述出来
    1. 完整的再次体验到输出对于自身知识体系的重构反作用(上次算是"23世纪学校"的小说体验)
   * 最后提交老师都感觉足够印刷质量了,邀请俺提交相关学刊,只是要另外给钱,被俺坚定的拒绝了 ;-)
 1. 在各种挫败体验中逐渐树立了技术取向
  * 毕业设计期间,跟随老师写工控模拟系统的界面,C++的,当时MFC 刚刚兴起,帮助老师没日没页的折磨那台可怜的 hp LaserJet 1000,打印帮助手册...非常直观的,有半米高的开发文档放在哪儿,俺就知道,这不是人类的生活--有必要为了那点儿工资,通读这么厚的东西嘛?!最终完成毕设时,也知道了,一个桌面软件,真实要用的控件并不多,那么这么多的MFC库,真的是万能的嘛?!
  * 另外,在广告公司全职作设计实习时,毕竟不是科班出生,山寨经验为基础,导致首次向印刷厂发设计稿时,才发现字体无法兼容！因为人家用的是 MAC 系统,俺用的是D版 Windows NT,虽然设计软件版本兼容,但是使用的字体完全无法兼容！发现这一现象后,立即将所有相关字体导入设计稿,并输出成PDF,以支持跨平台;结果包含了所有字体以及高清晰图片后,毎幅招贴的体积超过了500M,无法用MD 进行运输,最后是拆了硬盘自个儿跑去给人家安装到M$ PC上,然后看人家通过网络拉到 Apple 机中出片的！至此,对于跨平台有了最切肤的体验,也初次感受到 M$ 的局限性,开始了FLOSS 的探索...
 1. 开启了技术分享活动习惯:
  * 在常州LC公司任职期间,主持了一系列,面向市场人员的计算机扫盲讲座,以学校授课的形式,有教程/教案/问卷...嗯嗯嗯,事实证明,果然是低效率的!-(
  * 在上海JH公司任职期间,掺合过省内网页制作比赛的技术讲座,面向社会中自由网页制作人员(具体的说是上海嘉定县政府官网美工设计评比中入围人员),用一下午将当年的三剑客~reamweaver/fireworks/flash,怎么配合完成一系列特效页面的技术进行实例介绍...嗯嗯嗯,事实证明,在不了解听众水平的情况下,自个儿讲得再 HIGH 也是哑剧而已 ;-(
  * 后来,在公司网页制作组,通过 reamweaver 的组件功能,积累并发展内部一系列项目专用复用资源库,真正以实战方式,将一群非课班出身的网页美工大姐们,带入了协同式网页制作流程,算是此生头一次主持培训成功 ;-)


== 入门 ==
进入有一定技术实力的公司才真正接触了应用级开发技术,并形成了自个儿的技术追求方向.

 * 2000~2004 在上海JH公司,是通过大学同班同学介绍进入(同学又是通过老婆的关系进入...哈哈哈,中国特色)
 * 从网页制作开始->网站策划->应用模板->PHP开发->XSLT维护, 工作之余担当了各种网站的建设和管理任务,到最后通过反向代理,发布最初的啄木鸟维基;-) 在比较宽松的工作压力之下,自主学习了 LAMPs 系列技术, 从PHP 为窗口进入开源世界,进而接触到 自由软件思想!
 * 正是在上海的四年工作经验,重构了我原先M$为天的技术世界观,推翻了:"我自豪,我用D版"的技术价值观,通过各种大小项目,树立了独立应用网站系统开发的自信心,以及从美工到DBA 的全栈技术储备;最终遇到了Python,证明了PHP 的不稳定感觉是真的,找到了技术发展方向,进而也贏得了上北京的机会!

*自学!*   是这一阶段的主旋律,从摄影到漫画社管理到LAMPs...所有事儿,都是通过自学进行积累;最重大的个人资产积累要算父亲斥资1万,自个儿选配了一套PC,包含打印机/扫描仪/绘图板的个人工作室平台(修修补补一直用到2008才正式下岗,PS:液瞐屏是康佳的,到今天依然好用!-)
 * 但是,整体上,这是漫长的低速发展期,唯一算前沿的就是Python 了,通过中蟒项目接触到MoinMoin 通过 Python.cn 列表结识了一批好人,才进入社区式学习的高速公路.

回顾这一阶段的技术人生,入门是关键词:
 1. 项目管理入门
 1. 自由开发入门
 1. 技术社区入门

具体的说:
 1. 项目管理入门
  * Who:   俺自个儿
  * When:  1999-09~10
  * Where: 常州,具体点是 常州市LC通讯工程有限公司 信息部
  * Why:   在一个通讯工程公司中,作为可能的软件方面发展技术储备人员,是比较闲的,那么总得找点事儿作; 会了在 Windows 95 里用 PWS 发布asp动态应用后,就想学习正在火热发展的 Flash 技术,刚好公司想发布个简单的官方网站;就主动接了手;
  * What:  目标是漂亮的专业的,可以发布在C网中的公司网站;
  * How:
   * 自个儿看文档,Flash 那会玩的好的都是高丽人,几乎没有什么中文文档,特别是 Action Script 的资料; 硬是直接读内置的帮助文档,慢慢看完后,发觉就是有Flash 对象绑定的JS嘛!
   * 由于实习在一个广告公司呆过,所有基本设计软件都会用,美工也就自个儿了;
   * 自定的目标:作一个使用感觉和 Windows 类似的网站!那会儿公司网站几乎都是静态的说明性内容,通过Flash 控制的动态效果来进行互动很吸引人;用Flash 模拟用户的日常操作来展示基本业务信息也算尖端;
   * 用文本拟定了一个简单的开发计划,就闷头作了...
    * 由于没有体积什么的限制,将每个页面用不同的Flash 技巧展示成不同风格,统一在一个和 M$ 开始菜单一样的多级滑动菜单中索引;
    * 唯一的动态,就是通过 Action Script 读取外部文本,以便日后方便修订内容;
    * 最费时间的就是各种图元的DIY,`CorelDraw`自带光盘中的矢量图库,都是外国风格的,和公司现实销售的产品实在不吻合,都得自个儿画...
   * 最后内部展示一下,大家表示足够华丽,也就没有下文了...
  * 体验获得:
   # 自个儿的自学能力很靠谱
   # 没有授权的项目,作的再好也可能无用
   # 不作需求,一切自个儿定的效率最高,但是结果一定最无声...  
  * 经验教训:
   * 项目的成功与否,和技术的先进与否没有什么关系
   * 老板,或是说中国老板,最痛恨下面人不打招乎就作些什么尝试~也好理解,毕竟在公司的每一秒都在消耗公司的资源
   * 所谓需求,不是技术人员的开发需求,而是公司相关领域的实际需要,任何一个网站,都得结合公司的对外策略才可能引申出正确传达的内容和形式的...
   * 想避免项目失败?! 先获得授权,明确任务的范畴/指标/资源/上下部门接口,按期完成,才可能成功...
   * 当然,如何获得授权,并预留出自个儿可以进行技术探索的空间,这是另外的高级命题了 ;-)
 1. 自由开发入门
  * Who:   俺自个儿
  * When:  2002-02~03
  * Where: 上海,具体点是 JH公司,研发中心,自个儿的PC中
  * Why:   知道Python 有段日子了,也买了书(就是那本著名的 Learnning Python 中文第一版),但是一直没有完成一个实际的可用作品,于是想通过实际开发掌握Py的基本应用技能
  * What:  根据日常工作中的需要,作个 html->xhtml 的转换工具,将日常从美工哪儿收到的乱七八糟的html 变成标准的xhtml 以便后续手工嵌入动态代码
  * How: 边看边写边改
   * 现在回想是不由自主的在进行敏捷开发:
    1. 设定当前目标
    1. 写出粗糙的代码,印证设想,确保完成当前目标
    1. 增加要求
    1. 在保证以往功能不变的情况下,重构代码,加入新功能
   * 基本上以每周一个迭代版本的周期进行重构(可惜当时还不知道用版本管理系统,硬是用日期命名的目录进行了版本保存)
   * 逐步在实践中(精确的说应该算是赏玩儿--尝试所有的可能性)明白了什么是动态脚本,怎么样可以通用性/可扩展/可追踪的进行功能的扩展,以及如何对函式/类/变量起名,等等基础技巧,从原先的好奇,变成真正的喜愛上 Python 这一脚本语言了
  * 体验获得:
   # 学校课本式学习,基本无法获得开发体验,想会用一门开发语言,只能去用!
   # 没有外在压力的开发更加累,因为自个儿的标准是理想化的,不断倍增的...不论谁,拍起脑袋来都不差 Orz..
   # 不论自个儿以为多么完善,一但发布给公众,第一时间发觉不足的一定是文档
  * 经验教训:
   * 测试就是设计也是开发,不可测试的代码也就等于不可维护
   * 开发最好还是集中时间和精力连续开发,一但中断,随着累积功能的增加,头脑要恢复到原先的开发状态,用的时间就越多
   * 以己推人,通过自由开发,才能够真正理解自由软件开发的乐趣和真正程序员的心态,进入 hacker 的精神领域
 1. 技术社区入门
  * Who:   俺自个儿+Limodou
  * When:  2003-02~05
  * Where: czug.org,具体点是 中国Zope用户组官方门户的论坛中
  * Why: Zopen.cn ~ 润普 赞助并发布了 czug.org 社区,聚集 Zope 资源交流开发体验,但是俺感觉"润普"的名称太一般,建议用"润璞"更加有文化和内涵
  * What: 引发了一系列引经论典的激烈对话,所谓不打不相识,这才知道远在北京的Limodou 自学了Zope 并建立了几个实用的功能网站,以及在翻译各种Python 技术文档,以及对于技术翻译的通常理解...
   * 论战的过程中,使用了以往一直很成功的概念偷换,中心转移,论点扩散,等等流氓招术,但是毕竟文字争论,不是当面讲演,都被冷静的 Limodou 逐一化解,并精准的反擊,自个儿也在这一过程中,体验到了日后才见到的 Linus 的著名论断:
{{{
Talk is cheap. show me the code!
}}}
   * 于是,主动的搜索出 Limodou 的私人项目: [http://floss.zoomquiet.org/data/20080528101251/index.html 翻译与评论网] ,自行完善了界面样式,反馈给他,一下子就成为了长久的朋友,一直在线联系,交流Python 方面的学习/体验,进而在日后进京后,成为 BPyUG ~ 北京Python 用户组的长期主力讲师 ;-)
  * 经验教训:
   * "谁比谁傻多少?!" ~ 世上用心的人太多了,任何一个肯用心学习的人,都是在某一领域比自个儿强的人! 任何时候都要保持谦虚,"兼听则明",如果只是因为言语上的面子问题,没有认真理解他人的思想,就可能错失一个更加有趣的技术位面!
   * 表达思想时尽量中立,否则极易引发不必要的争论,浪费时间精力!
   * 技术社区是由千奇百怪的技术人聚集成的,每个人都有独立的唯一的思想体系,都是有可贵之处的,要想从这种思想过剩的社区中吸取力量,并展现自个儿的实力,最简单也最有效的,就是通过代码的交流!
   * 有趣应该,也的确是技术钻研的最大动力,回想进入 Python 社区的过程,其实非常曲折:
    1. 在常州时代通过php伊甸园等网站,扫了盲,在上海承接具体的功能网站开发过程中,逐步在网络中结识了一些PHP 先驱
    1. 其中 freelamp.com 的创始人 徐永久 是最关注的一位,从他的个人网站中看到了: [http://freelamp.com/58431 面向对象的Web 服务器 -- Zope]
     * PS:徐永久算是第一个见面的网友了,去他所在的证券公司蹭了回饭,了解到虽然他中意PHP,但是在实际工作中还是被迫选择了JAVA; 也是首次正面遭遇了软件经济学,开始了实效软件工程的起蒙自学...
    1. 于是顺虅摸瓜找到了 czug.org 这一当时最大的中文Zope技术中心,结交了 老潘/Limodou
    1. 进一步摸到了 中蠎 ,而且也深入的进行了辩论:
     * [http://www.chinesepython.org/cgi_bin/moingb.cgi/_d2_bb_cc_e1_b5_bd_b5_bd_20_d6_d0_ce_c4_b1_e0_b3_cc_b2_bb_d6_aa_d4_f5_c3_b4_b5_c4_a3_ac_20_b8_fa_cc_d6_c2_db_c8_d5_b1_be_c7_d6_bb_aa_b5_c0_c7_b8_d2_bb_d1_f9_b6_bc_b7_c7_b3_a3_bc_ab_b6_cb_a1_ad_a1_ad 一提到到 中文编程不知怎么的, 跟讨论日本侵华道歉一样都非常极端…… - ChinesePython Wiki]
     * 最重要的是学习了: [http://www.chinesepython.org/cgi_bin/moingb.cgi/_d2_bb_c7_d0_b4_d3_d3_ce_cf_b7_bf_aa_ca_bc 一切从游戏开始 - ChinesePython Wiki]
    1. 接下来就是自个儿架了 MoinMoin 收集 python.cn 邮件列表中讨论的成果,进行Python 知识收集/整理,促成了啄木鸟社区以及后来的CPyUG
   * 以上每一步都遭遇了大量的全新知识,必须快速的独立基本掌握,才可能进入下一阶段和大牛们对话的权力,嗯嗯嗯,就和游戏打关一样,每一关尽力冲破了,才发觉世界有更加艳丽的可能性,诱惑你继续尽力...


== 入教 ==
`自由软件的确是种宗教,信了才有前进的动力`~ 因为"主流"永远是社会的主旋律,但是"小众"才是社会的未来...

 * 2005~2007 S网,通过HD 的推荐,进入邮件技术部,后转到音乐事业部,作的是从来没有接触过的"过程改进"! 进而接触到了知识管理;只有进入有足够规模的技术公司,才能爆炸式的接触到不同级别的运营技术,这是任何小公司无法想象的领域...量变到质变,技术的视角不同,真的什么都不一样了;
 * 实际写出的系统不多,但是通过一批猛人,掌握并亲自运营了一批通过自由软件的组合发布的各种内部服务;彻底的从 Redhat 转变成了 FreeBSD派 (此生购买过的正版软件还就是 94元的redhat 4.2)
 * 北京的确是中国的政治文化技术中心,在北京可以接触到的各种机会从来没有停止过,但是有了一份追求后,就容易进行定向积累;

*社区!*   是这一阶段的主旋律:
 * 2005.07.18和一众行者共同成立了CPyUG(华蟒用户组),以统一的旗号,在各地自主开展Python 相关的宣传/培训/分享活动,自个儿在京3年多,主持了30次以上的各种技术分享;通过Python 社区中的能人,进一步的接触到更加丰富的自由软件技术领域,形成了自个儿以知识管理为核心的技术平台;
 * 通过GMail进入丰富的免费在线资源,进而潜入到上百个技术社区;
 * 通过各种社区项目实践,确立了分布式项目管理体系;
 * 通过各种项目体验到互联网经济学,形成比较全面的企业级运营观念;
 * 通过长期的社区活动,形成了自个儿的社会无形资产,进而赢得进入K公司的机会;-)
 * 通过各种场合的讲演和交流,形成了自个儿的沟通风格,进而形成维基式写作风格;

最大的灵魂冲擊,应该算是直面了 *[http://wiki.woodpecker.org.cn/moin/SaintRMS RMS]*!
 * 2005年9月,RMS应邀访问中国,在S网公司大厦参加了网络直播,俺掺合了接待活动;
 * 不论以往从各种渠道,通过文字/照片/影像了解到 RMS的追求和坚持,但是,真正面对活人时,依然颠覆了想象!
 * 外表邋遢,名聲显赫,技术地位无上的RMS,给俺的第一印象居然是纯净...
 * 不论作什么,都是从容自得的,该乐就乐,该气就气,象个老玩童,只是单纯的高兴的在作自个儿想作的事儿!
 * 从那一刻开始,俺感觉,俺知道俺入教了,相信世上存在这种人生态度,很美很简单,我也可以!
表现在工作生活中,就是开始主动分享了:
 * 相信知识的分享会越分享越多后,不自主的在分享时就考虑到日后任何人不论什么水平看到/听到我的分享后,是否可以获得足够有效的信息,也就不由自主的开始了广泛的 wiki/blogging/talking ,不由自主的鼓励任何人大声说出自个儿的问题/体验/快乐,不由自主的在列表中/在活动中主动维持起话题,引导起言论...不由自主的就变成了"社区大妈"
 * 当然大妈也不是那么好当的,随着社区的发展,越来越多的新人把你当知心大妈,什么问题都问之时,头是不得不变大的;
 * 也正是如此,才能更加真切的体验到那些原先看起来很不合理的邮件回复规范/提问方式 是多么的英明!
  * 进而也发现了向牛人们学习的最佳途径:"拍马屁!"
  * 牛人也是人,再神仙也是有七情六欲的,也是吃哄的 ;-)
  * 观其行听其言,先认真揣摩,根据只言片语,获得关键词,搜索出对应工具/文档,试用/体验/理解,尝试写出体验/收获,在此基础上还有疑问的话,肯定是牛人最得意之处了,针对这点送上问题,基本就是"托儿",可以让牛人欢快的倾吐包含丰富的技术思想的经历的"托儿"!再听进入,认真理解,牛人的技术自然高速进入自个儿的头脑了...
  * 后来才知道,这其实是有讲儿的:[http://wiki.woodpecker.org.cn/moin/AskForHelp 智慧的提问]
  * 甚至于包含到了相关指南中: [http://wiki.freebsdchina.org/howto/c/committer 如何成为FreeBSD Committer]

同时,也从工作实践中发现: 
`Process Enhancement keep evolving organizations which promoting people be good!`
 * *过程改进乃是催生可促生靠谱的人的组织!*
 
这是俺最终形成的`过程改进`世界观;是经历了
{{{
学校`瀑布式软件工程`
    |
    +-> 现实`经理抽风式指令开发`
        |
        +-> 大公司`绩效式伪项目过程`
            |
            +-> 自学`敏捷`
                |
                +-> 主持`分布式社区作品开发过程`
}}}
的不断挫折,参考相关资料才逐渐形成的有中国特色的山寨版本的理解,具体怎么说呢?
 * 在S网 受命解决的第一个任务是快速的 CVS 仓库管理,结果为了快速,用PHP 一周内完成了一个不依赖DB的`CVSMana.` 还获得了当年的内部技术创新奖;
 * 但是,俺来S网 是玩Python 来的哪! 可是,周围真的没有什么人使用Python ,于是更加渴望将用Python 开发的爽快可以直观的表达出来,以便让同事们感知到,开始体验之...
 * 当然,在生产系统中不用Python ,并不是因为对Python 不了解,毕竟引俺进入S网的HD,本身就是资深Python 开发者,而且有过大型系统的Python 实践经验; 但是,面向高并发访问压力和海量数据访问量的即有业务体系,进行运营/改进时,优先考虑的绝对不是技术先进性,而应该是成本! 运营/HR/维护/管理等等各个方面的成本,所以后来有曰:
 "不想作财务的程序员不是好CTO"!
 * 不过,对于这种身怀利器不得而用的状态,自个儿就非常不满意,于是在后来的各种大小任务中,都极力使用Python 来解决问题;虽然用 CherryPy 开发的任务管理原型"樱桃"败给了JAVA开发的"河童",推荐Python 开发的项目管理系统 Trac 败给了JAVA 开发的商业系统 JIRA ... 但是,依然用Python 完成了各种小工具/网站支持日常工作,于是,开始主动的将各个小作品的设计/开发/重构过程,逐一记录发布在维基中;这些就成为 2009 年出版的"可爱的Python" 一书中,实例故事的原型 ;-)

进一步的在有关编辑的忽悠之下形成了:"Lovely Python"
 * Who:   俺自个儿+N位行者 (N>20)
 * When:  2005-12~2009-09
 * Where: Inertnet,具体点是 http://wiki.woodpecker.org.cn/moin/ObpLovelyPython 为核心的一系列在线服务空间
 * Why:   总算从Python 小白走了出来,用CherryPy/Karrigell 也作了一些内部应用,看到列表中越来越多的新人,痛苦的和学校中塑造出的僵化思维作斗争,想学习Python,但是用学习C/JAVA/PHP 的方式来学习;非常没谱,就想通过自个儿不断重构一个实用网站的过程为例,传播Pythonic 的体验;
 * What:  目标是聚集广大靠谱牛人的经验,用自个儿的实例故事串接成最独特的原创Python 中文入门技术图书!
 * How:
  * 开始是怎么也没有想到可以出版的,只是想作个电子版本的在线图书
  * 没有想到仅仅有一个故事原型后,就有博文的编辑找上来协商出版的事儿,这才首次感受到SNS 的威力...
  * 接下来想成事儿,就不得不变成一个实际意义上的项目/产品/开发经理:
   # 招人: 图书什么内容,什么目标,谁有兴趣,可以来贡献什么内容?都得一一说明,沟通,协商,推动...
    到最后出版时,所有为了图书进行的各种渠道沟通的文字总量,远远髙出图书正文十多倍!
   # 需求: Python 是非主流语言,社区在中国也是非主流的,那么这种背景下的图书怎么样可以卖出去? 
    出版社编辑们是专家,但是在漫长的编写过程中,专家总在变,市场也在变,怎么平衡好出版商的期望和项目成员的理解,以及自个儿的坚持?! 还是沟通...
   # 研发: 有了阶段目标后,怎么将图书相关的文字/链接/图片/代码,统一管理和追踪起来? 
    幸好有 code.google 综合性一站式轻型项目管理平台!
    但是,还是要有其它服务配合:IRC/Wiki/mailisting/GTalk ....
    一切,还是为了沟通,要让所有人知道项目的所有变更,并留下可追溯的记录!
   # 测试: 对于图书,测试就是校对了...但是技术图书的校对要求就高了...
    * 首先得对相关技术有真实体验
    * 其次知道什么样的行文是当前读者可以接受的
    * 最后得有协作精神,可以主动协商统一术语
    * 这样的团队,真的得是可以随时f2f 沟通的,幸好通过哲思社区,在西安邮电学院找到了...
   # 集成: 对于图书就是排版了,这方面,真是辛苦编辑了,我们坚持使用维基进行撰写界面,但是排版公司只能够理解 Word 文档的,这导致编辑得亲自来理解MoinMoin 维基文本格式,自行排版样章,然后交付排版公司进行最终排版...如果中间出现理解偏差导致调整的话,就可能整个重新排版...最终这一过程长到数次许愿...
   # 发布: 基于社区分布式协作的图书正式印刷发行了,总得给个交付,不论是稿酬的分配,后期电子版本的分享,相关社区的宣传,图书销售网站的自我宣传,相关质疑的澄清...林林总总,也得关注至少两个月...
   # 运营: 我们是将图书当成网站来结构/设计/撰写的,当然也和网站一樣要运营! 通过预先开辟好的各种渠道,收集/关注/接纳各种意见,并持续改进版本仓库中的内容,为下一版本的图书,不断完善...
 * *体验获得*:
  # 项目成功与否,首先得坚持信念!
  # 项目原始目标越单纯,越简单,越容易实现!
  # 自个儿和自个儿,或是自个儿和技术的沟通最容易和可控!
  # 任何超过两人的沟通,都应该述诸文字进行,否则,信息在流通过程中必定会走样!
  # 有计划不一定按时完成,但是,没有计划,那是万不可能完成了...
  # [http://www.zoomquiet.org/share/s5/090913-lovpy/ 090913-lovpy 图书工程最佳体验]
  # [http://code.google.com/p/openbookproject/wiki/HowToBuildBookOnline 如何组织在线图书工程]

经历了分布式社区图书协作后,反观大公司项目管理过程,也就明白各种流行的管理方式都是治标不治本:
 * 社区工程的本质动力,是大家认同一个简单明了的有趣的不变的追求,过程中任何问题,都将引发大家的积极主动的寻求解决,那矛盾也都是对事儿不对人,最后输出的是代码还是文章,根本不重要,重要的是大家在享受这一过程;
 * 商业公司里项目的动力,多是利益压力,从高层,层层分解下来的绩效指标,到了实际开发人员手上,完全看不出有什么意义!
  * 所以,多数情况下,负责任的程序员,总喜欢加入一些自个儿的理解,并引入一些技术的小突破,来将对项目的无趣,转换成一部分自个儿有兴趣的技术钻研,以便支撑自个儿的工作热情; 
  * 可是杯具的是,多数情况下,程序员并没有多少时间允许这么进行自我成就感的塑造,进度要求都非常紧,以至明知有问题,但是只要面儿上过得去也就这么作了,长期这么作也就习惯了过的去的代码质量;
  * 更加杯具的是,如果程序员积极按时,甚至于提前完成了功能的增补,换来的可能并不是阶段性的回顾/休整/重构,而是需求的变更,和更加紧张的进度要求! 于是,老程序员会慢慢发现,有时候不作比作还要高效,到最后大家也分不清是因为积极的程序员按时交付了工作而引发了产品经理虚幻的自信导致了需求的多变甚至于反复呢?还是因为懒惰的程序员总是拖延工作的交付而引发了产品经理真实的不自信导致了需求的多变甚至于反复呢?!

所以,白话定义有中国特色的`过程改进`其实就是:
 * 替开发团队给产品团队找出一个相对靠谱的绩效指标来协调双方进度
 * 以便施放开发团队的活力,激发团队中每个人持续的自我改进,从而涌现出更多的牛人,进而输出令公司满意的产品

== 传教 ==
`传达美妙的体验,不是简单的活儿...`因为:
{{{
不明白的当然说不明白,
明白了不一定说得明白;
自认说明白了其实没谱,
说是看明白了更加没谱!
奇妙在说时才知不明白,
被看明白的才是真明白!
}}}


=== 沟通 ===
`沟通不是万能的,但是不沟通是万万不能的...`

 * 2007.9.18 ~ 进入K软件,珠海研发本部,过程改进组
 * 首次获得授权组建团队,自然的通过社区进行挖掘,实际动用以往社区中积累的人望,基本上还算成功;
 * 可是发觉要对所有成员的职业发展负责,的确非常不容易,因为,首先得对公司有所交待,其次,才可能不断获得公司资源来支持成员的发展!可是,所有在社区中行之有效的体验,在企业环境中,都难以快速见效,毕竟项目压力是绝对的...
 * 不过,有压力也才有动力,敢于将自个儿作小白鼠,并留好后路...嗯嗯嗯,我想这就是 Yeka 感觉到的,我从技术愤青变得很开放很平衡的主要背景了 ;-)

*绩效!*   算是这一阶段的主旋律,因为是打着给K软件引入新的技术/思路/平台/人员的旗号来的...
 * 从事基础支撑平台建设,用各种FLOSS 工具和系统,组合出整个软件研发过程中各个环节对应的管理支持服务
 * 对内,专心营造一种技术人员可以自主选择各种方案,只要确保具体的各项需求达成的过程是平稳可控的;
 * 时间和沟通管理,成为最大的精力支出;
 * 个人技术积累方面,仅仅扩展出Erlang 一门语言,Lisp/Haskell/Smalltalk 都仅仅在不时垂涎;比较满意的只有在 Ubuntu 中自如的生活四年以来,启动M$ 的次数真的可以忽略了(当然的网络消费受到了限制,幸好有了这方面专业级的老婆大人来掌管,免去了自个儿道德vs方便的纠结)

最大的收获,应该算是成了家...哈!不同的生活视角,思想也完全不同鸟:
 * 用户的意志是绝对的,其中高层的意志是绝对绝对的,不要想着改进,先迎合了,才有资格谈改善!
 * 技术的选择,必须从节省成本考虑~成本因素中,最大的成本就是时间! 不是运行时间,而是开发和维护,以及交接用时!
 
为什么得出以上的阶段结论呢? 推理很简单:
 * 有家有娃了,未来的家庭支出是可预测的稳步上升的,要想给力的支撑只能靠工作收入;
 * 收入是和绩效挂勾的,绩效是和指标对应的,指标是分解到岗位的,岗位是要用绩效来争取的,绩效就是要超额完成指标的,指标...嗯嗯嗯?死循环了?!
 * 反正,工作中有好的表现,才可能获得支撑家庭发展的资源;
 * 工作中的表现,是靠整个团队的效率的;
 * 整个团队的效率,取决于能力最囧的那位同学的效率;
 * 最囧的那位同学的效率,取决于其个人的开发习惯;
 * 个人的开发习惯来自长期的行为积累;
 * 长期的行为积累,不可能短期改变! 但是不改变,将进一步加深!
 * 所以,只能逐步引导,给空间/时间来自主改进;
  * 自然,技术方案上的选择,就得兼顾更多的因素,一切为了女儿将来有钱上学,就得忍,就得妥协,就得亲自贴身进行苦口婆心的开导,沟通,鼓励,支持...大家好,才是真正的好 ;-)
  * 当然没法继续原先技术愤青的态度,不能一言堂,只能为成员服务,支持整体成长才可能产生成绩.
 * 可是,团队的自主发展的空间/时间需要的资源,是由高层来支付的,根据绩效考核来评定的!
  * "拿人钱财与人消灾",天经地义;争取团队空间增长个人素质也不过是为了提高解决公司实际需求的效率而已,因果要拎得清哈!
  * 故而,作为上传下达的中间人,俺就得在两个极端命题中找到平衡:
   * 充分理解绩效指标的基础上,尽力向高层说明现实状态,滞缓目标的被调整,以便团队可以追求优雅的完成任务;
   * 充分理解成员现状的基础上,尽力使成员理解绩效指标,激发能动性,均衡学习/实践,以使团队更好的完成任务;
  * 所有的核心命题,就是*沟通!*前文所说的:`"同任何人沟通的基本技巧和开放的心态,这是一个 Geek 最核心的素质..."`也是这一时期才更加尖锐的体验到的:
   # 和自己沟通,不断提醒自己真正的目标/问题是什么,激励自个儿,用不断的成就感,驱动自己成长;
   # 和领导沟通,不断提醒领导真正的目标/问题是什么,提供信心给领导,用不断的进度,赢得支持;
   # 和下属沟通,不断提醒成员真正的目标/问题是什么,激励成员,用不断的成就感,带领大家持续成长;
   # 和其它沟通,不断宣传团队使命,展示成果,营造/积累团队荣誉形象,用不断的社会反响,激励成员持续成长;
  * 什么是 Geek ?定义有万千种,放在生产背景中, Geek 就是合格的工程师气质,可以独立解决问题的综合能力!
   * 但是,在现代软件工程中,个人英雄早已死去,任何一个系统,都在组织中,专业分化成了多种崗位/职责/能力/资源纠缠在一起的支撑体系,不论对上对下对内对外,任何一种沟通一但出现问题,"烈士"的境地就不远矣...

沟通,如此重要,却发现并不是所有人重视...进一步究其原因,俺猜想是*学习动力*的缺失:

=== 学习 ===
`忘记的就是不重要的,不知道的就是不必要的!`

 * 这是后来俺形成的一句新口头禅 ;-(
 * 因为沟通是双向的,传递信息+获取反馈,是同时生效才是有用的沟通,否则,只是情绪的渲泄而已;
 * 但是,沟通的发起/决议/追踪/完成/回顾,是个完整的项目过程哪,这其中包含了N多技巧和知识,都是需要主动学习才可能越来越顺畅的运用的!
 * 可是!居然/的确/多数情况下: `忘记的就是不重要的,不知道的就是不必要的!`
  * 只有当事人有主动的意愿,才可能形成各种级别/领域/方向知识的习得/传播/再创造...
  * 那么为什么没有产生主动的意愿呢?!
  * 进一步的,不自主的进入到 *知识管理* 领域,才发现:

http://openbookproject.googlecode.com/files/KMdefine_2011-02-23-112810_502x318_scrot.png

{{{
知识管理乃是培育可催生自学习型组织的团队文化!
        |  |  |     |     |     |
        |  |  |     +-----+     |
        |  |  |        |        |
        |  |  +--------+        |
        |  |        |           |
        |  |        +-----------+
        |  |              |
        |  +--------------+
        |         |
        +---------+
}}}

举个实例, 怎么在新公司立足? 当然是快速拿出可以证明实力的作品;K软件2008春晚,俺参演了一场话剧的同时,又编导了一个音乐话剧--*"K软件第一浪漫"*
 * Who:   俺自个儿+N位志愿者 (N<7)
 * When:  071210~080113
 * Where: 四处预订的不同会议室
 * Why:   春晚筹委会指定各部新人必须出节目,俺荣幸的被指定要出个节目!
 * What:  以真人真事儿为基础,完成一个好演易排好看的全部轻音乐剧
 * How: 依足自个儿山寨版过程改进思想的项目管理流程...
  * 需求管理: 自个儿根据采访,快速改编为剧本,打印分发给成员
  * 版本管理: 排练计划/角色分配/剧本等等,都发布在维基中,利用维基系统的版本追踪
   * http://openbookproject.googlecode.com/files/MaxRomantic_2011-02-23-130256_567x404_scrot.png
  * 变更管理: 每次排练后,根据现场的即兴发挥,修订剧本记入维基,下次收回打印复本,下发最新的
  * 发布管理: 每次排练都有签到/录音/点评,每周进行一次联排,迭代整个音乐剧的全部过程
  * 虽然监场时意外不断,好歹完成了出演,表达出了主旨,得了个三等奖,以及"周导"的外号;
  * 不过结论是:
    * 完全不靠谱!不论自个儿想的多完整,都难以精确的表达并让对方理解
    * 时间/人员 这两大项目资源完全无法控制,太多意外了,毕竟都是被义务参演,在年末Q4绩效考察前,正常工作的同时要进行话剧排练,这个动力问题就难以解决,就算是特等奖也不过几千,分一下,还不如自个儿的绩效奖金呢,要说艺术追求?!蒙得了谁?!
    * 所以,只有指标可以自主调整,最后只能不断的妥协,妥协,妥协!尽管尽我所能的给出了所有表演方面的学习资料/体验,但是,整个剧组是临时的,用人情生绑在一起的,没有那个钻研戏剧艺术的气氛,所有成员的动力到最后可能就是:"不要丢脸!在台上..." 可想而知,目的不纯的话,根本无法放开身心,自如的传达情绪,也就无法在练习中感受到学习的乐趣,更加不愿意投入精力改进表演...

不过通过这一过程,体验到`Hacking Mind`比`Hacking code`有趣得多!
 * 代码的hacking,最后,整个项目挂了得话,代码几乎没有机会在线运行,也就自然消散了
 * 然而,对于给定目标人员头脑中任何一丝 `Mind` hacking 成功的话,将直接进入其一生的社会活动中,成为自身所有主动行为的影响因素,可能产生无数种不同程度和领域的影响,并随着不断学习的积累/加强嵌入新的 `Mind` 中...嗯嗯嗯,深刻理解了灵魂工程师的快感源泉 ;-)


=== 行者无疆 ===
正是因为这些年不同团队的经历,发觉所谓成功,拼的除了资源外,全部是团队的知识管理水平:
 * 团队技术资产的积累/传承/创新,基于内部良好的学习氛围和顺畅的沟通渠道
 * `知识`并不是静态的纸面儿上的死东西,不进入团队成员所有人的头脑中,变成日常能发挥的经验,那是幻象
 * 所谓`知识管理`的管理对象根本不是"知识",而是活的人的学习行为呢...

回顾自个儿的知识管理演化,从媒介来说:
 1. 1974~2004 是传统媒介--纸时代:
  * 受到的所有教育,提及的知识管理相关的,都是自个儿作笔记/剪报/卡片
  * 积累到最后,其实是要面对各种各类达上百公斤的纸!
  * 实在没有什么好的空间和设备来专门处理了,在离开常州时,还能尽力都带上,但是在上海几次搬家时,已经越来越力不从心了,北上时,是送掉了400多册各类图书后,又快运了150公斤!
 1. 2004之后 有了PC,而且接触的技术领域越来越另类,中文资料越来越少后,进入电子资料时代:
  * 形成了一个本地的比较稳定的目录树
  * 收集主要以 .chm/.pdf/.mht 为形式的网络资料,但是!
   1. 无法有效的搜索,快速定位到需要的部分
   1. 无法快速分享给需要的人
   1. 无法跨平台使用
  * 积累到60G 左右后,就无法使用了... 即便使用了 Google Desktop 也无法快速定位需要的文件,关键是文件的打开需要时间,而且在多文件中切换,提取部分内容重组的成本越来越大...
 1. 有了GMail 之后,Web2.0 时代正式到来了,于是顺应潮流,快速建立起自个儿的SNS 化知识管理体系:
  * 邮件列表~讨论
  * 维基~整理输出
  * Scrapbook~随时抓取原料
  * Blog~记要过程,总结体验
  * Twitter/Buzz ... ~ 接收推送的技术动态
  * ...
  * 最Happy 的,是通过坚持在固定领域的技术社区中厮混,无意间成为有一定知名度的"大妈"后;很多资源,或是说知识源会主动找上来,形成越来越方便和及时的知识推送群落,令学习成为"被主动学习"的过程 ;-)

从输出形式来说:
 1. 2004 以前,主要是文字+代码,围绕具体项目建立起对应领域的知识岛
  * 问题是知识点依赖太多问题域背景,无法简单的快速摄取,组合到新的项目中
  * 同样,背景太复杂的话,也不利于他人的查阅和复用
 1. CPyUG 成立之后,就转移成以各种技术交流场所为中心,幻灯/录音/录像/维基/blog 等等复合式的输出
  * 其中,思维图谱的成份也逐年增加;
  * 图形脚本最 geek,其中 Graphviz 用得最多:
    * http://zoomquiet.org/res/s5/100918-MyTools/rst2s5/i/map/zqtools_mapping.jpg
  * 但是,手绘永远是最爽直的:
    * http://zoomquiet.org/res/s5/100918-MyTools/rst2s5/i/handarw-mindmap.gif

从反馈渠道来说:
 1. 2002 以前,基本是异步的:
  * 具体技术问题的解决,通过自学,代码尝试,成为经验,到被他人注意,提问,解答,形成知识的流传/再创造,至少要半年时间,甚至永远没有机会获得反馈
  * 同样,背景太复杂的话,也不利于他人的查阅和复用
 1. 2004 以前,通过个人网站的建立,异步的节奏快了起来:
  * 使用Nucles CMS系统,在友人虚拟空间中建立blog,除了分享自个儿的喜好外,将近期的各种技术探索进行了小结通报
  * 通过初级的搜索引擎,慢慢被同好所发现,逐步有对应的知识点通过评注反馈回来,这一反馈周期平均加速到一个月
 1. 2005 以后,随着各种个人SNS渠道的建立,完全的同步了起来:
  * 邮件列表/IRC/Twitter/Buzz/Blog/wiki 所有渠道,都被强大的搜索引擎实时覆盖了,
  * 任何一个关心的技术点,可以通过各种渠道主动挖掘出一堆资料,以及作者的信息,可以直接提问!
  * 任何自个儿阶段性成果,可以通过各种渠道统一的实时发布到很有规模的针对性人群,并立即获得反馈...
 1. 2009 聚集一群行者,攒出本"可愛的Python"后,体验到候捷的经验:
  * *"发表是最好的记忆"*
  * 反馈渠道进一步的异步/同步间杂在一起,算是将长期的稳定经验,和最新试用经验,进行了针对性的支持;
  * 更加体验到,输出(不论哪种形式的输出,幻灯/文章/图书/维基/blog...)其实也是学习过程,以帮助他人获得经验绕过自个儿栽过的坑为目的的输出,面临多重困难:
   1. 形式上:行文是否足够易读/有条理/吻合阅读习惯...
   1. 内容上:是否给出足够参考,给不同的知识背景人群以合适的引导?配图/列举代码是否清晰/可用/无岐义...
   1. 表述上:是否足够有趣/有气势?可以吸引足够的注意力,扼住读者的思考脉络,平稳带领走完整个过程?
   1. 时机上:是否可以精确的出现在有相同领域问题的人眼前?为没有兴趣的人讲任何东西,都是事倍无功的!
   ...
  * 好吧,俺得承认,之所以不怯当众讲演,长期喜欢听相声也算个技巧,曲艺里的"三翻四抖"那可不就是最高级别的讲演技巧?以 `Hacking Mind` 的不良目的上台,用各种小招术,根据现场的听众反应,实时调整策略,把自个儿愿意灌输的通过言语直接嵌入别人的意识中,多好玩哪.,.

到现在,主要的矛盾已经不是茂盛的好奇心和相对匮乏的学习资料间的矛盾,
而是无穷的待解决业务问题及配套的更多可选技术解决方案与有限的时间精力间的矛盾!
这会儿,学什么,怎么学已经不成问题时,选择学什么就成为了关键问题...

就俺个人来说,明白自个儿是个什么样的人,追求什么样的人生,喜欢什么样的技术,就成为了选择的核心标准,因为:
 * 现实世界本来就宏大复杂到难以改变
 * 可以自主改变的只有自个儿
 * 快乐的编程和工作,还是郁闷的被动学习作个高效码农,选择权的确在自个儿手里
业务问题千变万化,应对技术更加变化无穷,用自个儿感兴趣的技术,结合稳妥的业务方案,优雅的解决,在其中不断印证自个儿的技术信仰,并记录过程中的心路变化,及时传达给有兴趣的同好们,这就是现在的我,一名社区大妈的编译中间结果!


== 感谢 ==
`因为Yeka 的提议,有机会回顾一下自个儿的成长历程,`这才真切的发现,自个儿是非常幸运的,虽然整体上升很慢,但是每次都正好有机会来完成加速:
 * 前20年,进行基础素质积累,稳定的生活环境,形成了稳定的心理和生理素质
 * ~2004,5年,完成了计算机技术的原始积累,具备了独立作战能力
 * ~2007,3年,形成了完整的技术体系储备,通过Python 算是开了眼,确立了技术方向
 * ~至今,2年,进行技术实现,用自个儿的技术追求来赢得公司认同...
 
可以说,是个标准的加速过程;每日需要下的决策越来越多和复杂;想学习的东西越来越多但时间越来越少;
 * 好在,有社区背景,感觉很有底气,一切技术问题都是可以解决的,只有用户体验是得用真诚打动的 ;-)
 * 只是,技术积累和公司目标的重合,这一命题,还需要学习,大学习!
 
=== 参考 ===
 * [http://code.google.com/p/sociallearnlab/wiki/SllPrjZQ 社区过程改进 实践参考]~ 仨儿之建议集
 * [http://wiki.woodpecker.org.cn/moin/FuZiZoomq IT时代的老夫子--ZOOMQ]

<wiki:toc max_depth="4" />


